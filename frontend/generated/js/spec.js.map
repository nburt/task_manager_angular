{
  "version": 3,
  "file": "spec.js",
  "sources": [
    "generated/js/spec.coffee.js"
  ],
  "names": [],
  "mappings
  "sourcesContent": [
    "(function() {\n  describe(\"controller: LoginController ($httpBackend.when().respond, jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    Invariant(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"when a user successfully logs in\", function() {\n      Given(function() {\n        return this.$httpBackend.whenPOST('/login', this.scope.credentials).respond(200);\n      });\n      When(function() {\n        return this.scope.login();\n      });\n      When(function() {\n        return this.$httpBackend.flush();\n      });\n      return Then(\"LoginController should redirect you to /home\", function() {\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, coffeescript)\", function() {\n    beforeEach(function() {\n      return module(\"app\");\n    });\n    beforeEach(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$location = $location;\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    afterEach(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"successfully logging in\", function() {\n      return it(\"should redirect you to /home\", function() {\n        this.$httpBackend.expectPOST('/login', this.scope.credentials).respond(200);\n        this.scope.login();\n        this.$httpBackend.flush();\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"directive: shows-message-when-hovered (jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($rootScope, $compile) {\n      this.directiveMessage = 'ralph was here';\n      this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n      this.scope = $rootScope.$new();\n      this.scope.message = this.originalMessage = 'things are looking grim';\n      return this.elem = $compile(this.html)(this.scope);\n    }));\n    describe(\"when a user mouses over the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseenter');\n      });\n      return Then(\"the message on the scope is set to the message attribute of the element\", function() {\n        return this.scope.message === this.directiveMessage;\n      });\n    });\n    return describe(\"when a users mouse leaves the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseleave');\n      });\n      return Then(\"the message is reset to the original message\", function() {\n        return this.scope.message === this.originalMessage;\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"service: AuthenticationService\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(function() {\n      var _this = this;\n      return inject(function($http, AuthenticationService) {\n        _this.AuthenticationService = AuthenticationService;\n        _this.$httpPost = spyOn($http, 'post');\n        return _this.$httpGet = spyOn($http, 'get');\n      });\n    });\n    describe(\"#login\", function() {\n      Given(function() {\n        return this.credentials = {\n          name: 'Dave'\n        };\n      });\n      When(function() {\n        return this.AuthenticationService.login(this.credentials);\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/login', this.credentials);\n      });\n    });\n    return describe(\"#logout\", function() {\n      When(function() {\n        return this.AuthenticationService.logout();\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/logout');\n      });\n    });\n  });\n\n}).call(this);\n"
  ]
}